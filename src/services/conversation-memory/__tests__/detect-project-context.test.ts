import { describe, it, expect, beforeEach, afterEach, vi } from "vitest"
import * as fs from "fs/promises"
import * as path from "path"
import { ConversationMemoryOrchestrator } from "../orchestrator"

// Mock dependencies
const mockVectorStore = {
	ensureCollection: vi.fn(),
	insert: vi.fn(),
	search: vi.fn(),
	delete: vi.fn(),
	update: vi.fn(),
	get: vi.fn(),
}

const mockEmbedder = {
	embed: vi.fn().mockResolvedValue([0.1, 0.2, 0.3]),
	dimension: 1536,
}

const mockStateManager = {
	setSystemState: vi.fn(),
	state: "Standby" as const,
}

describe("ConversationMemoryOrchestrator - Project Context Detection", () => {
	let orchestrator: ConversationMemoryOrchestrator
	let tempDir: string

	beforeEach(async () => {
		// Create a temporary workspace directory
		tempDir = await fs.mkdtemp(path.join(require("os").tmpdir(), "roo-test-"))

		orchestrator = new ConversationMemoryOrchestrator(
			tempDir,
			mockVectorStore as any,
			mockEmbedder as any,
			mockStateManager as any,
		)

		// Reset all mocks
		vi.clearAllMocks()
	})

	afterEach(async () => {
		// Clean up temp directory
		await fs.rm(tempDir, { recursive: true, force: true })
	})

	describe("Python Package Manager Detection", () => {
		it("should detect uv from [tool.uv.workspace] in pyproject.toml", async () => {
			// Create pyproject.toml with uv configuration
			const pyprojectContent = `
[project]
name = "test-project"
version = "0.1.0"

[tool.uv.workspace]
members = ["packages/*"]

[tool.uv]
dev-dependencies = [
    "pytest",
]
`
			await fs.writeFile(path.join(tempDir, "pyproject.toml"), pyprojectContent)

			const context = await (orchestrator as any).detectProjectContext()

			expect(context.language).toBe("python")
			expect(context.packageManager).toBe("uv")
		})

		it("should detect uv from [tool.uv] in pyproject.toml", async () => {
			// Create pyproject.toml with uv configuration (without workspace)
			const pyprojectContent = `
[project]
name = "test-project"
version = "0.1.0"

[tool.uv]
dev-dependencies = [
    "pytest",
]
`
			await fs.writeFile(path.join(tempDir, "pyproject.toml"), pyprojectContent)

			const context = await (orchestrator as any).detectProjectContext()

			expect(context.language).toBe("python")
			expect(context.packageManager).toBe("uv")
		})

		it("should detect uv from uv.lock file", async () => {
			// Create pyproject.toml without uv tool config
			const pyprojectContent = `
[project]
name = "test-project"
version = "0.1.0"
`
			await fs.writeFile(path.join(tempDir, "pyproject.toml"), pyprojectContent)

			// Create uv.lock file
			await fs.writeFile(path.join(tempDir, "uv.lock"), "# This file is autogenerated by uv")

			const context = await (orchestrator as any).detectProjectContext()

			expect(context.language).toBe("python")
			expect(context.packageManager).toBe("uv")
		})

		it("should detect poetry from [tool.poetry] in pyproject.toml", async () => {
			const pyprojectContent = `
[project]
name = "test-project"
version = "0.1.0"

[tool.poetry]
name = "test-project"
version = "0.1.0"
`
			await fs.writeFile(path.join(tempDir, "pyproject.toml"), pyprojectContent)

			const context = await (orchestrator as any).detectProjectContext()

			expect(context.language).toBe("python")
			expect(context.packageManager).toBe("poetry")
		})

		it("should detect poetry from poetry.lock file", async () => {
			// Create pyproject.toml without tool configs
			const pyprojectContent = `
[project]
name = "test-project"
version = "0.1.0"
`
			await fs.writeFile(path.join(tempDir, "pyproject.toml"), pyprojectContent)

			// Create poetry.lock file
			await fs.writeFile(path.join(tempDir, "poetry.lock"), "# This file is autogenerated by poetry")

			const context = await (orchestrator as any).detectProjectContext()

			expect(context.language).toBe("python")
			expect(context.packageManager).toBe("poetry")
		})

		it("should detect pdm from [tool.pdm] in pyproject.toml", async () => {
			const pyprojectContent = `
[project]
name = "test-project"
version = "0.1.0"

[tool.pdm]
dev-dependencies = [
    "pytest",
]
`
			await fs.writeFile(path.join(tempDir, "pyproject.toml"), pyprojectContent)

			const context = await (orchestrator as any).detectProjectContext()

			expect(context.language).toBe("python")
			expect(context.packageManager).toBe("pdm")
		})

		it("should detect pipenv from Pipfile", async () => {
			// Create requirements.txt to trigger Python detection
			await fs.writeFile(path.join(tempDir, "requirements.txt"), "requests==2.28.0")

			// Create Pipfile
			const pipfileContent = `
[[source]]
url = "https://pypi.org/simple"
verify_ssl = true
name = "pypi"

[packages]
requests = "*"
`
			await fs.writeFile(path.join(tempDir, "Pipfile"), pipfileContent)

			const context = await (orchestrator as any).detectProjectContext()

			expect(context.language).toBe("python")
			expect(context.packageManager).toBe("pipenv")
		})

		it("should NOT default to pip when package manager cannot be determined", async () => {
			// Create only requirements.txt (no pyproject.toml or lock files)
			await fs.writeFile(path.join(tempDir, "requirements.txt"), "requests==2.28.0")

			const context = await (orchestrator as any).detectProjectContext()

			expect(context.language).toBe("python")
			// CRITICAL: Should be undefined, not "pip"
			expect(context.packageManager).toBeUndefined()
		})

		it("should NOT default to pip when pyproject.toml exists without package manager indicators", async () => {
			// Create pyproject.toml without any tool configurations
			const pyprojectContent = `
[project]
name = "test-project"
version = "0.1.0"
`
			await fs.writeFile(path.join(tempDir, "pyproject.toml"), pyprojectContent)

			const context = await (orchestrator as any).detectProjectContext()

			expect(context.language).toBe("python")
			// CRITICAL: Should be undefined, not "pip"
			expect(context.packageManager).toBeUndefined()
		})
	})

	describe("Precedence Testing", () => {
		it("should prioritize pyproject.toml [tool.uv] over lock files", async () => {
			// Create pyproject.toml with uv config
			const pyprojectContent = `
[project]
name = "test-project"
version = "0.1.0"

[tool.uv]
dev-dependencies = ["pytest"]
`
			await fs.writeFile(path.join(tempDir, "pyproject.toml"), pyprojectContent)

			// Create conflicting poetry.lock file
			await fs.writeFile(path.join(tempDir, "poetry.lock"), "# poetry lock")

			const context = await (orchestrator as any).detectProjectContext()

			expect(context.language).toBe("python")
			expect(context.packageManager).toBe("uv") // Should detect uv, not poetry
		})

		it("should detect framework correctly alongside package manager", async () => {
			// Create requirements.txt with FastAPI
			await fs.writeFile(path.join(tempDir, "requirements.txt"), "fastapi==0.68.0\nuvicorn==0.15.0")

			// Create pyproject.toml with uv config
			const pyprojectContent = `
[project]
name = "test-project"
version = "0.1.0"

[tool.uv]
dev-dependencies = ["pytest"]
`
			await fs.writeFile(path.join(tempDir, "pyproject.toml"), pyprojectContent)

			const context = await (orchestrator as any).detectProjectContext()

			expect(context.language).toBe("python")
			expect(context.packageManager).toBe("uv")
			expect(context.framework).toBe("fastapi")
		})
	})

	describe("Regression Tests", () => {
		it("should handle corrupted pyproject.toml gracefully", async () => {
			// Create invalid pyproject.toml
			await fs.writeFile(path.join(tempDir, "pyproject.toml"), "invalid toml content [[[")

			const context = await (orchestrator as any).detectProjectContext()

			expect(context.language).toBe("python")
			expect(context.packageManager).toBeUndefined() // Should not crash
		})

		it("should handle empty pyproject.toml gracefully", async () => {
			// Create empty pyproject.toml
			await fs.writeFile(path.join(tempDir, "pyproject.toml"), "")

			const context = await (orchestrator as any).detectProjectContext()

			expect(context.language).toBe("python")
			expect(context.packageManager).toBeUndefined() // Should not crash
		})
	})
})
